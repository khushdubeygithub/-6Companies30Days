//ets take a small example to understand the situation:

[4,5,3,2,9]

//Now,

F(0) = 4 * 0 + 5 * 1 + 3 * 2 + 2 * 3 + 9 * 4 = 53
F(1) = 9 * 0 + 4 * 1 + 5 * 2 + 3 * 3 + 2 * 4 = 31
F(2) = 2 * 0 + 9 * 1 + 4 * 2 + 5 * 3 + 3 * 4 = 44
F(3) = 3 * 0 + 2 * 1 + 9 * 2 + 4 * 3 + 5 * 4 = 52
F(4) = 5 * 0 + 3 * 1 + 2 * 2 + 9 * 3 + 4 * 4 = 50

def maxRotateFunction(self, A: List[int]) -> int:
        arr_sum = sum(A)
        sum_of_products = 0
        for i,val in enumerate(A):
            sum_of_products+= i*val
            
        n = len(A)
        max_val = sum_of_products
        for i in range(1,n):
			# A[-i] is the last val after each shift.
            sum_of_products+=(arr_sum-(A[-i]*n))
            max_val = max(max_val ,sum_of_products)
        return max_val
